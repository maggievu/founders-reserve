{"version":3,"sources":["assets/img/first_screen2.png","assets/img/first_screen3.png","assets/img/adventure-alpine-background-355747.png","assets/img/first_screen1.png","assets/img/image10.png","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","className","layers","image","bg1","amount","expanded","bg2","screen","children","src","cloudLg","alt","cloudSm","style","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,gE,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,+OCyD5BC,MAhDf,WACC,OACC,yBAAKC,UAAU,YACd,yBAAKA,UAAU,aACd,kBAAC,iBAAD,CACCA,UAAU,gBACVC,OAAQ,CACP,CACCC,MAAOC,IACPC,OAAQ,GACRC,UAAU,GAEX,CACCH,MAAOI,IACPF,OAAQ,IACRC,UAAU,GAEX,CACCH,MAAOK,IACPH,OAAQ,EACRC,UAAU,GAEX,CACCG,SACC,yBAAKR,UAAU,YAAYS,IAAKC,IAASC,IAAI,UAE9CP,QAAS,GACTC,UAAU,GAEX,CACCG,SACC,yBAAKR,UAAU,YAAYS,IAAKG,IAASD,IAAI,UAE9CP,QAAS,IACTC,UAAU,IAGZQ,MAAO,CACNC,OAAQ,cClCCC,MARf,WACC,OACC,kBAAC,mBAAD,KACC,kBAAC,EAAD,QCIiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bd3a53f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/first_screen2.f3fd3958.png\";","module.exports = __webpack_public_path__ + \"static/media/first_screen3.8079c1c6.png\";","module.exports = __webpack_public_path__ + \"static/media/adventure-alpine-background-355747.b63023f1.png\";","module.exports = __webpack_public_path__ + \"static/media/first_screen1.12b46222.png\";","module.exports = __webpack_public_path__ + \"static/media/image10.f4d99892.png\";","import React from 'react'\nimport { ParallaxBanner, Parallax } from 'react-scroll-parallax'\nimport screen from '../assets/img/first_screen2.png'\nimport bg1 from '../assets/img/first_screen3.png'\nimport bg2 from '../assets/img/adventure-alpine-background-355747.png'\nimport cloudSm from '../assets/img/first_screen1.png'\nimport cloudLg from '../assets/img/image10.png'\n// import Button from 'react-bootstrap/Button'\n\nfunction Wrapper() {\n\treturn (\n\t\t<div className=\"vertical\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<ParallaxBanner\n\t\t\t\t\tclassName='section-intro'\n\t\t\t\t\tlayers={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: bg1,\n\t\t\t\t\t\t\tamount: 0.6,\n\t\t\t\t\t\t\texpanded: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: bg2,\n\t\t\t\t\t\t\tamount: 0.25,\n\t\t\t\t\t\t\texpanded: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: screen,\n\t\t\t\t\t\t\tamount: 0,\n\t\t\t\t\t\t\texpanded: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<img className=\"img-cloud\" src={cloudLg} alt=\"cloud\" />\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tamount: -0.2,\n\t\t\t\t\t\t\texpanded: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t\t<img className=\"img-cloud\" src={cloudSm} alt=\"cloud\" />\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tamount: -0.25,\n\t\t\t\t\t\t\texpanded: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\theight: '100vh',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t</ParallaxBanner>\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Wrapper","import React from 'react'\nimport './App.scss'\nimport { ParallaxProvider } from 'react-scroll-parallax'\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n\treturn (\n\t\t<ParallaxProvider>\n\t\t\t<Wrapper />\n\t\t</ParallaxProvider>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}